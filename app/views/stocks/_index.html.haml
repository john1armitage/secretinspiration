-#.stocks
- first = true
- @stocks.each do |stock|
  - if first
    - stock_bases_items = []
    - stock_bases = Item.where(stock_base_id: stock.item_id)
    - stock_bases_sold = 0
    - stock_bases_portions = 0
    - if stock_bases.size > 0
      - stock_bases.each do |sb|
        - stock_bases_quantity = LineItem.joins("LEFT OUTER JOIN variants ON variants.id = line_items.variant_id").where('line_items.created_at >= ? and line_items.domain = ? and item_id = ?', stock.stock_date, current_tenant.domain, sb.id).sum(:quantity)
        - stock_bases_sold += stock_bases_quantity
        - stock_bases_portions += stock_bases_quantity.to_d / sb.stock_base_part.to_d
        - stock_bases_items << "#{sb.name}:#{sb.stock_base_part}:#{stock_bases_quantity.to_i}"
    - sold_items = LineItem.joins("LEFT OUTER JOIN variants ON variants.id = line_items.variant_id").where('line_items.created_at >= ? and line_items.domain = ? and item_id = ?',
          stock.stock_date, current_tenant.domain, stock.item_id) #.select('line_items.created_at, line_items.domain, item_id, line_items.options, line_items.quantity, variants.name')
    - unless stock.item_option.blank?
      - sold_items = sold_items.where("line_items.options LIKE '%#{stock.item_option}%'")
    - sold = sold_items.sum(:quantity)
    - total_sold = 0
    - sold_items.each do |item|
      - parts = 1
      - if item.variant.name != 'default'
        -# WINES
        - whole = 750
        - case item.variant.name
          - when 'Large'
            - parts = whole / 250
          - when 'Medium'
            - parts = whole / 175
      - else
        - parts = item.options.split(',').size unless item.options.empty?
      - total_sold += (item.quantity.to_d / parts.to_d)


      -#- p item.desc
      -#- p item.variant.name
      -#- p parts
      -#- p item.quantity.to_d / parts.to_d
      -#- p total_sold
  %p.compact
    %span
      %b
        = "#{stock.stock_date.strftime('%e %b %Y')}"
      = "#{stock.stock_level} stock"
    %span= link_to '[x]', stock, :method => :delete, :data => { :confirm => 'Remove stock reading?' }, remote: true, class: 'no_ajaxify'
    - if first
      %br
      %span= "#{(total_sold + stock_bases_portions).ceil} portions sold (#{sold + stock_bases_sold } items)"
      %br
      %span= "= #{(total_sold).to_i} #{stock.item.name} (#{sold} items)"
      - unless stock_bases_items.empty?
        %br
        - stock_bases_items.each do |i|
          +
          - item = i.split(':')
          %span= "#{(item[2].to_d / item[1].to_d).ceil} #{item[0]} (#{item[2]} items)"
      - first = false

